import { CircuitBuilder, FALSE } from '../builder.js';
import { seq } from '../utils.js';

import assert from 'node:assert';

// This table has the format [nInputBits, nStateBits, maxTrajectory, overflow],
// where overflow is either null or [smallestInput, smallestInputSteps,
// shortestSequenceInput, shortestSequenceSteps]. The resulting circuit will be
// safe if and only if overflow is null.
const precomputedParameters = [
  [3, 6, 52, null],
  [4, 8, 160, null],
  [5, 9, 9232, [27, 29, 31, 24]],
  [5, 10, 9232, [27, 36, 31, 31]],
  [5, 11, 9232, [27, 61, 31, 56]],
  [5, 12, 9232, [27, 65, 31, 60]],
  [5, 13, 9232, [27, 77, 31, 72]],
  [5, 14, 9232, null],
  [6, 10, 9232, [27, 36, 63, 11]],
  [6, 11, 9232, [27, 61, 47, 54]],
  [6, 12, 9232, [27, 65, 47, 58]],
  [6, 13, 9232, [27, 77, 47, 70]],
  [6, 14, 9232, null],
  [7, 11, 9232, [27, 61, 127, 11]],
  [7, 12, 9232, [27, 65, 127, 13]],
  [7, 13, 9232, [27, 77, 111, 35]],
  [7, 14, 9232, null],
  [8, 12, 13120, [27, 65, 191, 11]],
  [8, 13, 13120, [27, 77, 255, 13]],
  [8, 14, 13120, null],
  [9, 13, 39364, [27, 77, 383, 11]],
  [9, 14, 39364, [447, 18, 511, 13]],
  [9, 15, 39364, [447, 53, 511, 17]],
  [9, 16, 39364, null],
  [10, 14, 250504, [447, 18, 767, 11]],
  [10, 15, 250504, [447, 53, 1023, 13]],
  [10, 16, 250504, [703, 27, 1023, 17]],
  [10, 17, 250504, [703, 75, 871, 31]],
  [10, 18, 250504, null],
  [11, 15, 1276936, [447, 53, 1471, 11]],
  [11, 16, 1276936, [703, 27, 1919, 13]],
  [11, 17, 1276936, [703, 75, 2047, 17]],
  [11, 18, 1276936, [1819, 26, 2047, 21]],
  [11, 19, 1276936, [1819, 43, 2047, 38]],
  [11, 20, 1276936, [1819, 50, 2047, 45]],
  [11, 21, 1276936, null],
  [12, 16, 1276936, [703, 27, 2879, 11]],
  [12, 17, 1276936, [703, 75, 3839, 13]],
  [12, 18, 1276936, [1819, 26, 3583, 17]],
  [12, 19, 1276936, [1819, 43, 4095, 21]],
  [12, 20, 1276936, [1819, 50, 4095, 23]],
  [12, 21, 1276936, null],
  [13, 17, 8153620, [703, 75, 5759, 11]],
  [13, 18, 8153620, [1819, 26, 7679, 13]],
  [13, 19, 8153620, [1819, 43, 7167, 17]],
  [13, 20, 8153620, [1819, 50, 6143, 21]],
  [13, 21, 8153620, [4255, 66, 8191, 23]],
  [13, 22, 8153620, [4255, 80, 8191, 37]],
  [13, 23, 8153620, null],
  [14, 18, 27114424, [1819, 26, 11519, 11]],
  [14, 19, 27114424, [1819, 43, 15359, 13]],
  [14, 20, 27114424, [1819, 50, 13823, 17]],
  [14, 21, 27114424, [4255, 66, 12287, 21]],
  [14, 22, 27114424, [4255, 80, 16383, 23]],
  [14, 23, 27114424, [9663, 44, 16383, 27]],
  [14, 24, 27114424, [9663, 46, 14495, 44]],
  [14, 25, 27114424, null],
  [15, 19, 121012864, [1819, 43, 23039, 11]],
  [15, 20, 121012864, [1819, 50, 30719, 13]],
  [15, 21, 121012864, [4255, 66, 27647, 17]],
  [15, 22, 121012864, [4255, 80, 24575, 21]],
  [15, 23, 121012864, [9663, 44, 32767, 23]],
  [15, 24, 121012864, [9663, 46, 32767, 27]],
  [15, 25, 121012864, [20895, 87, 28287, 36]],
  [15, 26, 121012864, [26623, 61, 26623, 61]],
  [15, 27, 121012864, null],
  [16, 20, 593279152, [1819, 50, 46079, 11]],
  [16, 21, 593279152, [4255, 66, 61439, 13]],
  [16, 22, 593279152, [4255, 80, 54783, 17]],
  [16, 23, 593279152, [9663, 44, 49151, 21]],
  [16, 24, 593279152, [9663, 46, 65535, 23]],
  [16, 25, 593279152, [20895, 87, 65535, 27]],
  [16, 26, 593279152, [26623, 61, 65535, 31]],
  [16, 27, 593279152, [60975, 110, 65307, 56]],
  [16, 28, 593279152, [60975, 114, 65307, 60]],
  [16, 29, 593279152, [60975, 116, 60975, 116]],
  [16, 30, 593279152, null],
  [17, 21, 2482111348, [4255, 66, 92095, 11]],
  [17, 22, 2482111348, [4255, 80, 122751, 13]],
  [17, 23, 2482111348, [9663, 44, 109567, 17]],
  [17, 24, 2482111348, [9663, 46, 98303, 21]],
  [17, 25, 2482111348, [20895, 87, 131071, 23]],
  [17, 26, 2482111348, [26623, 61, 131071, 27]],
  [17, 27, 2482111348, [60975, 110, 131071, 31]],
  [17, 28, 2482111348, [60975, 114, 129183, 48]],
  [17, 29, 2482111348, [60975, 116, 129183, 50]],
  [17, 30, 2482111348, [77671, 71, 131071, 64]],
  [17, 31, 2482111348, [113383, 120, 113383, 120]],
  [17, 32, 2482111348, null],
  [18, 22, 17202377752, [4255, 80, 184127, 11]],
  [18, 23, 17202377752, [9663, 44, 245503, 13]],
  [18, 24, 17202377752, [9663, 46, 218623, 17]],
  [18, 25, 17202377752, [20895, 87, 194559, 21]],
  [18, 26, 17202377752, [26623, 61, 262143, 23]],
  [18, 27, 17202377752, [60975, 110, 245759, 27]],
  [18, 28, 17202377752, [60975, 114, 262143, 31]],
  [18, 29, 17202377752, [60975, 116, 262143, 35]],
  [18, 30, 17202377752, [77671, 71, 239231, 47]],
  [18, 31, 17202377752, [113383, 120, 239231, 54]],
  [18, 32, 17202377752, [159487, 60, 239231, 58]],
  [18, 33, 17202377752, [159487, 64, 239231, 62]],
  [18, 34, 17202377752, [159487, 66, 239231, 64]],
  [18, 35, 17202377752, null],
  [19, 23, 24648077896, [9663, 44, 368255, 11]],
  [19, 24, 24648077896, [9663, 46, 491007, 13]],
  [19, 25, 24648077896, [20895, 87, 436735, 17]],
  [19, 26, 24648077896, [26623, 61, 389119, 21]],
  [19, 27, 24648077896, [60975, 110, 520191, 23]],
  [19, 28, 24648077896, [60975, 114, 475135, 27]],
  [19, 29, 24648077896, [60975, 116, 458751, 31]],
  [19, 30, 24648077896, [77671, 71, 524287, 35]],
  [19, 31, 24648077896, [113383, 120, 524287, 37]],
  [19, 32, 24648077896, [159487, 60, 419839, 46]],
  [19, 33, 24648077896, [159487, 64, 358847, 60]],
  [19, 34, 24648077896, [159487, 66, 358847, 62]],
  [19, 35, 24648077896, null],
  [20, 24, 90239155648, [9663, 46, 736511, 11]],
  [20, 25, 90239155648, [20895, 87, 982015, 13]],
  [20, 26, 90239155648, [26623, 61, 872959, 17]],
  [20, 27, 90239155648, [60975, 110, 776191, 21]],
  [20, 28, 90239155648, [60975, 114, 1036287, 23]],
  [20, 29, 90239155648, [60975, 116, 933887, 27]],
  [20, 30, 90239155648, [77671, 71, 851967, 31]],
  [20, 31, 90239155648, [113383, 120, 786431, 35]],
  [20, 32, 90239155648, [159487, 60, 1048575, 37]],
  [20, 33, 90239155648, [159487, 64, 807407, 56]],
  [20, 34, 90239155648, [159487, 66, 807407, 58]],
  [20, 35, 90239155648, [665215, 142, 704511, 67]],
  [20, 36, 90239155648, [1042431, 206, 1042431, 206]],
  [20, 37, 90239155648, null],
  [21, 25, 156914378224, [20895, 87, 1472959, 11]],
  [21, 26, 156914378224, [26623, 61, 1963903, 13]],
  [21, 27, 156914378224, [60975, 110, 1745919, 17]],
  [21, 28, 156914378224, [60975, 114, 1552383, 21]],
  [21, 29, 156914378224, [60975, 116, 2072575, 23]],
  [21, 30, 156914378224, [77671, 71, 1851391, 27]],
  [21, 31, 156914378224, [113383, 120, 1638399, 31]],
  [21, 32, 156914378224, [159487, 60, 1572863, 35]],
  [21, 33, 156914378224, [159487, 64, 2097151, 37]],
  [21, 34, 156914378224, [159487, 66, 2097151, 41]],
  [21, 35, 156914378224, [665215, 142, 1835007, 50]],
  [21, 36, 156914378224, [1042431, 206, 1818623, 75]],
  [21, 37, 156914378224, [1212415, 84, 1818623, 82]],
  [21, 38, 156914378224, null],
  [22, 26, 858555169576, [26623, 61, 2945855, 11]],
  [22, 27, 858555169576, [60975, 110, 3927807, 13]],
  [22, 28, 858555169576, [60975, 114, 3491327, 17]],
  [22, 29, 858555169576, [60975, 116, 3104767, 21]],
  [22, 30, 858555169576, [77671, 71, 4141055, 23]],
  [22, 31, 858555169576, [113383, 120, 3686399, 27]],
  [22, 32, 858555169576, [159487, 60, 3276799, 31]],
  [22, 33, 858555169576, [159487, 64, 3145727, 35]],
  [22, 34, 858555169576, [159487, 66, 4194303, 37]],
  [22, 35, 858555169576, [665215, 142, 4194303, 41]],
  [22, 36, 858555169576, [1042431, 206, 4064103, 53]],
  [22, 37, 858555169576, [1212415, 84, 3041127, 62]],
  [22, 38, 858555169576, [2684647, 120, 3041127, 66]],
  [22, 39, 858555169576, [3041127, 78, 3041127, 78]],
  [22, 40, 858555169576, null],
  [23, 27, 60342610919632, [60975, 110, 5891647, 11]],
  [23, 28, 60342610919632, [60975, 114, 7855487, 13]],
  [23, 29, 60342610919632, [60975, 116, 6982655, 17]],
  [23, 30, 60342610919632, [77671, 71, 6207487, 21]],
  [23, 31, 60342610919632, [113383, 120, 8278015, 23]],
  [23, 32, 60342610919632, [159487, 60, 7356415, 27]],
  [23, 33, 60342610919632, [159487, 64, 6553599, 31]],
  [23, 34, 60342610919632, [159487, 66, 6029311, 35]],
  [23, 35, 60342610919632, [665215, 142, 7864319, 37]],
  [23, 36, 60342610919632, [1042431, 206, 8388607, 41]],
  [23, 37, 60342610919632, [1212415, 84, 8388607, 45]],
  [23, 38, 60342610919632, [2684647, 120, 7643135, 52]],
  [23, 39, 60342610919632, [3041127, 78, 7697855, 69]],
  [23, 40, 60342610919632, [4637979, 168, 7202815, 86]],
  [23, 41, 60342610919632, [5656191, 170, 7202815, 90]],
  [23, 42, 60342610919632, [6416623, 133, 7202815, 97]],
  [23, 43, 60342610919632, [6631675, 145, 7460635, 140]],
  [23, 44, 60342610919632, [6631675, 154, 7460635, 149]],
  [23, 45, 60342610919632, [6631675, 156, 7460635, 151]],
  [23, 46, 60342610919632, null],
  [24, 28, 60342610919632, [60975, 114, 11783231, 11]],
  [24, 29, 60342610919632, [60975, 116, 15710975, 13]],
  [24, 30, 60342610919632, [77671, 71, 13965311, 17]],
  [24, 31, 60342610919632, [113383, 120, 12414975, 21]],
  [24, 32, 60342610919632, [159487, 60, 16551935, 23]],
  [24, 33, 60342610919632, [159487, 64, 14712831, 27]],
  [24, 34, 60342610919632, [159487, 66, 13107199, 31]],
  [24, 35, 60342610919632, [665215, 142, 11796479, 35]],
  [24, 36, 60342610919632, [1042431, 206, 15728639, 37]],
  [24, 37, 60342610919632, [1212415, 84, 14680063, 41]],
  [24, 38, 60342610919632, [2684647, 120, 16777215, 45]],
  [24, 39, 60342610919632, [3041127, 78, 16777215, 47]],
  [24, 40, 60342610919632, [4637979, 168, 12611199, 66]],
  [24, 41, 60342610919632, [5656191, 170, 13238271, 86]],
  [24, 42, 60342610919632, [6416623, 133, 16206335, 93]],
  [24, 43, 60342610919632, [6631675, 145, 12589823, 133]],
  [24, 44, 60342610919632, [6631675, 154, 12589823, 142]],
  [24, 45, 60342610919632, [6631675, 156, 12589823, 144]],
  [24, 46, 60342610919632, null],
];

function buildCollatzSequenceCircuit(params) {
  const [nInputBits, nStateBits, maxTrajectory, overflowInfo] = params;
  assert(nStateBits > nInputBits);
  const overflow = overflowInfo == null ? null : {
    smallestInput: overflowInfo[0],
    smallestInputSteps: overflowInfo[1],
    shortestSequenceInput: overflowInfo[2],
    shortestSequenceSteps: overflowInfo[3]
  };

  const b = new CircuitBuilder(seq(nInputBits).map((i) => `input_bit_${i}`));
  const stateBits = seq(nStateBits).map(() => b.newVar());
  const stateIsZeroOrOne = b.bitsEqualToConst(stateBits.slice(1), seq(nStateBits - 1).fill(false));
  const stateIsOdd = stateBits[0];
  const evenResult = seq(nStateBits).map((i) => stateBits[i + 1] ?? FALSE);
  const multOverflow = stateBits[nStateBits - 1];
  const [oddResult, addOverflow] = b.addLEPlus1(stateBits, seq(nStateBits).map((i) => stateBits[i - 1] ?? FALSE));
  const nextState = seq(nStateBits).map((i) => b.ifElse(stateIsOdd, oddResult[i], evenResult[i]));
  for (let i = 0; i < nStateBits; i++) {
    b.addLatch(stateBits[i],
        b.ifElse(stateIsZeroOrOne, (i < nInputBits) ? b.input(i) : FALSE,
                                   nextState[i]),
        `state_bit_${i}`);
  }
  b.addOutput(b.and(stateIsOdd, b.or(multOverflow, addOverflow)),
              'overflow_indicator');
  return b.build(
      `This circuit takes a ${nInputBits}-bit integer and then proceeds to ` +
      `compute the Collatz sequence starting at the given number. Once it ` +
      `reaches 1, it again copies the ${nInputBits} input bits and begins ` +
      'computing the new Collatz sequence. During the calculation of each ' +
      'sequence, any change in the input bits is ignored.\n\n' +
      `While the input consists of ${nInputBits} bits only, internally, the ` +
      `circuit uses ${nStateBits}-bit arithmetic. The single output bit will ` +
      'be set to 1 whenever an overflow occurs in the calculation of the ' +
      'Collatz sequence (and will reset to 0 immediately afterwards).\n\n' +
      (overflow ? 'The smallest input that causes such an overflow is ' +
                  `${overflow.smallestInput} (after ` +
                  `${overflow.smallestInputSteps} steps). The input that ` +
                  `causes an overflow within the smallest number of steps is ` +
                  `${overflow.shortestSequenceInput} (after ` +
                  `${overflow.shortestSequenceSteps} steps).`
                : `No such overflow can occur. The maximum trajectory point ` +
                  `is ${maxTrajectory}, which is less than ` +
                  `${2 ** nStateBits}.`));
}

export default Object.fromEntries(precomputedParameters.map((params) => [
  `collatz-sequence-${params[0].toString().padStart(2, '0')}-${params[1].toString().padStart(2, '0')}`,
  [params[3] === null, () => buildCollatzSequenceCircuit(params)]
]));

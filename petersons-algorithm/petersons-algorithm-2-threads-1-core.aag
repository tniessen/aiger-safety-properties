aag 120 2 9 1 109
2
4
6 43
8 63
10 79
12 111
14 135
16 157
18 189
20 213
22 235
240
24 12 15
26 17 24
28 13 14
30 16 28
32 6 31
34 27 32
36 27 35
38 3 37
40 2 6
42 39 41
44 18 21
46 23 44
48 19 20
50 22 48
52 8 51
54 47 52
56 47 55
58 2 57
60 3 8
62 59 61
64 17 28
66 10 65
68 65 67
70 23 48
72 10 71
74 3 69
76 2 72
78 75 77
80 5 12
82 12 81
84 15 83
86 29 85
88 9 12
90 12 89
92 4 13
94 14 91
96 15 92
98 95 97
100 16 87
102 17 99
104 101 103
106 3 105
108 2 12
110 107 109
112 4 12
114 10 13
116 113 115
118 15 117
120 29 119
122 25 29
124 16 121
126 17 123
128 125 127
130 3 129
132 2 14
134 131 133
136 11 13
138 13 137
140 15 139
142 29 141
144 12 14
146 16 143
148 17 144
150 147 149
152 3 151
154 2 16
156 153 155
158 5 18
160 18 159
162 21 161
164 49 163
166 7 18
168 18 167
170 4 19
172 20 169
174 21 170
176 173 175
178 22 165
180 23 177
182 179 181
184 2 183
186 3 18
188 185 187
190 4 18
192 11 19
194 191 193
196 21 195
198 49 197
200 45 49
202 22 199
204 23 201
206 203 205
208 2 207
210 3 20
212 209 211
214 10 19
216 19 215
218 21 217
220 49 219
222 18 20
224 22 221
226 23 222
228 225 227
230 2 229
232 3 22
234 231 233
236 16 24
238 22 44
240 236 238
i0 thread_select
i1 signal
l0 flag_0
l1 flag_1
l2 turn
l3 thread_0_pc_0
l4 thread_0_pc_1
l5 thread_0_pc_2
l6 thread_1_pc_0
l7 thread_1_pc_1
l8 thread_1_pc_2
o0 both_threads_in_critical_section
c
--------------------------------------------------------------------------------
This circuit implements Peterson's algorithm for mutual exclusion among two
threads. Each of the two threads in this example waits for the "signal" input,
then attempts to enter the critical section. Once a thread enters the critical
section, it remains there until it receives another signal. Peterson's algorithm
guarantees that only one thread can be within the critical section at any given
time.
---
Both threads are assumed to share a single core, that is, only one instruction
of one thread is executed at any given time. The first input is used to select
which thread shall be active, i.e., scheduling is non-deterministic. The signal
is only delivered to the active thread.
---
The output bit is set only if both threads are within the critical section at
the same time, which should never happen.
--------------------------------------------------------------------------------
This file is part of https://github.com/tniessen/aiger-safety-properties.
---
The output variable is UNSATISFIABLE.

aag 259 4 15 1 240
2
4
6
8
10 131
12 51
14 57
16 155
18 167
20 209
22 247
24 283
26 303
28 341
30 379
32 415
34 435
36 477
38 489
519
40 2 17
42 4 19
44 41 42
46 11 40
48 10 12
50 47 49
52 11 44
54 10 14
56 53 55
58 2 51
60 4 57
62 20 23
64 25 27
66 62 64
68 21 23
70 25 26
72 68 70
74 67 73
76 58 75
78 28 31
80 33 35
82 78 80
84 29 31
86 33 34
88 84 86
90 83 89
92 60 91
94 77 93
96 21 22
98 24 27
100 96 98
102 24 26
104 62 102
106 101 105
108 58 107
110 29 30
112 32 35
114 110 112
116 32 34
118 78 116
120 115 119
122 60 121
124 109 123
126 10 124
128 94 126
130 94 129
132 17 18
134 68 102
136 58 134
138 84 116
140 60 138
142 137 141
144 62 98
146 58 144
148 16 143
150 16 149
152 147 150
154 147 153
156 78 112
158 60 156
160 132 143
162 18 161
164 159 162
166 159 165
168 17 19
170 37 38
172 23 69
174 24 68
176 25 173
178 175 177
180 7 20
182 20 181
184 22 183
186 6 21
188 23 186
190 97 189
192 24 184
194 25 191
196 193 195
198 26 179
200 27 197
202 199 201
204 58 203
206 20 59
208 205 207
210 20 168
212 23 210
214 97 213
216 24 62
218 25 215
220 217 219
222 22 185
224 21 171
226 22 224
228 63 227
230 24 223
232 25 229
234 231 233
236 26 221
238 27 235
240 237 239
242 58 241
244 22 59
246 243 245
248 20 169
250 20 22
252 23 248
254 251 253
256 23 24
258 25 255
260 257 259
262 21 170
264 21 263
266 22 265
268 25 266
270 231 269
272 26 261
274 27 271
276 273 275
278 58 277
280 24 59
282 279 281
284 24 257
286 6 20
288 22 286
290 24 288
292 26 285
294 27 290
296 293 295
298 58 297
300 26 59
302 299 301
304 31 85
306 32 84
308 33 305
310 307 309
312 9 28
314 28 313
316 30 315
318 8 29
320 31 318
322 111 321
324 32 316
326 33 323
328 325 327
330 34 311
332 35 329
334 331 333
336 60 335
338 28 61
340 337 339
342 28 168
344 31 342
346 111 345
348 32 78
350 33 347
352 349 351
354 30 317
356 29 171
358 30 356
360 79 359
362 32 355
364 33 361
366 363 365
368 34 353
370 35 367
372 369 371
374 60 373
376 30 61
378 375 377
380 28 169
382 28 30
384 31 380
386 383 385
388 31 32
390 33 387
392 389 391
394 29 170
396 29 395
398 30 397
400 33 398
402 363 401
404 34 393
406 35 403
408 405 407
410 60 409
412 32 61
414 411 413
416 32 389
418 8 28
420 30 418
422 32 420
424 34 417
426 35 422
428 425 427
430 60 429
432 34 61
434 431 433
436 64 250
438 58 436
440 80 382
442 60 440
444 439 443
446 70 96
448 58 446
450 86 110
452 60 450
454 449 453
456 36 39
458 171 457
460 36 38
462 37 39
464 461 463
466 37 455
468 36 454
470 467 469
472 37 445
474 444 471
476 473 475
478 455 465
480 38 454
482 479 481
484 445 459
486 444 483
488 485 487
490 98 250
492 17 490
494 112 382
496 19 494
498 492 497
500 493 496
502 499 501
504 492 496
506 503 504
508 169 171
510 445 460
512 455 462
514 507 511
516 509 513
518 514 516
i0 enable_thread_0
i1 enable_thread_1
i2 signal_thread_0
i3 signal_thread_1
l0 interrupts_disabled
l1 thread_0_selected
l2 thread_1_selected
l3 thread_0_sleeping
l4 thread_1_sleeping
l5 thread_0_pc_0
l6 thread_0_pc_1
l7 thread_0_pc_2
l8 thread_0_pc_3
l9 thread_1_pc_0
l10 thread_1_pc_1
l11 thread_1_pc_2
l12 thread_1_pc_3
l13 semaphore_count_0
l14 semaphore_count_1
o0 bad_state_detector
c
--------------------------------------------------------------------------------
This circuit simulates a single processor that switches between 2 threads using
a simplistic scheduler. The scheduler is triggered by interrupts, which can be
disabled and enabled by the current thread. Additionally, a thread can enter a
sleeping state, which will prevent the scheduler from switching to that thread.
---
On top of these features, a semaphore is implemented, which ensures that at most
2 threads can be within the critical section simultaneously. When a thread wants
to acquire the semaphore after receiving a signal, it disables interrupts and
then compares the semaphore count to the limit. If possible, the thread changes
the semaphore count and continues after enabling interrupts again. If that is
not possible, the thread enters a sleeping state, enables interrupts, and yields
to the scheduler. Once a thread has acquired the semaphore, it remains in the
critical section until receiving another signal. Once that happens, it releases
the semaphore by first disabling interrupts, thus disabling the scheduler, then
checks if another thread is waiting for the semaphore. If that is the case, the
active thread wakes one of the waiting threads, then enables interrupts again,
allowing the scheduler to switch to the awakened thread at the next interrupt.
If no thread is waiting for the semaphore, the active thread changes the
semaphore count and enables interrupts again, resuming normal control flow, and
returns to its initial state (i.e., waits for another signal).
---
The output variable is set if any of the following is true, none of which can
happen:
* 3 or more threads are in the critical section simultaneously,
* an arithmetic overflow occurs when changing the semaphore count, or
* a thread is sleeping for no reason.
--------------------------------------------------------------------------------
This file is part of https://github.com/tniessen/aiger-safety-properties.
---
The output variable is UNSATISFIABLE.
